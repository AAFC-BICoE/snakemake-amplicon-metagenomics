""" Oksana Korol, June 15, 2016

Amplicon Metagenomics Workflow for GRDI EcoBiomics project.

Version 0.1 (trial)

Steps of the workflow:
1. Trimming
Tool: trimmomatic version 0.36

2. Overlapping - aligning forward and reverse sequences
Tool: Qiime. Script: join_paired_ends.py. This script have to be substituted for multiple_join_paired_ends.py in HPC cluster.

3. Chimera checking
Tool: Qiime. identify_chimeric_seqs.py script. This step may end up being moved after OTU clustering and picking representative sequences. Since it takes a lot of processing time, it might make sense to execute it on representative sequences, instead of the whole set.

4. OTU Picking and classification
Tools: Qiime. Scripts:
 *  pick_de_novo_otus.py did not work well on the test data, but is very convenient and has all the steps embedded. It does not have an option to cluster using CD-HIT, though.
 *  Sequence of manual steps:
    -    Cluster OTU: pick_otus.py
    -    Pick representative sequences: pick_rep_set.py
    -    Classify: assign_taxonomy.py
    -    Make OTU: make_otu_table.py

"""

configfile: "config.yaml"

# Workdir can be changed when executing workflow:
# snakemake --config workdir="data/amplicon_workflow/"
workdir: config["workdir"]

rule all:
    input:
        "step7_otu/otu_table.otu"


rule trimm:
    input:
        forward = config["initial_input_forward"],
        reverse = config["initial_input_reverse"],
    output:
        forward_paired = "step1_trimmomatic/output_R1_paired.fastq",
        reverse_paired = "step1_trimmomatic/output_R2_paired.fastq",
        #forward_unpaired = "step1_trimmomatic/output_R1_unpaired.fastq",
        #reverse_unpaired = "step1_trimmomatic/output_R2_unpaired.fastq",
    params:
        output_dir = "step1_trimmomatic"
    message:
        "Trimming input sequences with Trimomatic 0.36"
    shell:
        """
        java -jar ~/bin/trimmomatic-0.36.jar PE -threads 8 -phred33 {input.forward} {input.reverse} \
        {output.forward_paired} {params.output_dir}/output_R1_unpaired.fastq {output.reverse_paired} {params.output_dir}/output_R2_unpaired.fastq \
        LEADING:25 TRAILING:25 SLIDINGWINDOW:1:25 MINLEN:100
        """
        #LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36


rule join:
    input:
        forward_paired = "step1_trimmomatic/output_R1_paired.fastq",
        reverse_paired = "step1_trimmomatic/output_R2_paired.fastq"
    output:
        joined_seqs = "step2_join/fastqjoin.join.fastq",
        #unjoined_forward_seqs = "step2_join/fastqjoin.un1.fastq",
        #unjoined_reverse_seqs = "step2_join/fastqjoin.un2.fastq",
    message:
        "Joining forward and reverse paired-end sequences with Qiime 1.9 join_paired_ends.py script."
    shell:
        """
        join_paired_ends.py -f {input.forward_paired} -r {input.reverse_paired} -o step2_join/ -m fastq-join 
        """
        #-j 20 -p 2


rule convert_fastq_to_fasta:
    input:
        "step2_join/fastqjoin.join.fastq"
    output:
        "step3_convert_to_fasta/trimmed_joined.fasta"
    shell:
        """
        awk 'BEGIN{{P=1}}{{if(P==1||P==2){{gsub(/^[@]/,">");print}}; if(P==4)P=0; P++}}' {input} > {output}
        """ 

rule cluster_otus:
    input:
        "step3_convert_to_fasta/trimmed_joined.fasta"
    output:
        "step4_pick_otu/trimmed_joined_otus.txt"
    shell:
        """
        pick_otus.py -i {input} -m cdhit -s 0.97 -o step4_pick_otu 
        """

rule pick_representatives:
    input:
        otu = "step4_pick_otu/trimmed_joined_otus.txt",
        fasta = "step3_convert_to_fasta/trimmed_joined.fasta"
    output:
        "step5_pick_representatives/rep_set.fasta"
    shell:
        """
        pick_rep_set.py -i {input.otu} -f {input.fasta} -o {output}
        """

rule classify:
    input:
        dataset = "step5_pick_representatives/rep_set.fasta",
        reference_fasta = "unite.fasta",
        reference_txt = "unite.txt"
    output:
        "step6_classify/rep_set_tax_assignments.txt"
    shell:
        """
        assign_taxonomy.py -i {input.dataset} -m mothur -r {input.reference_fasta} -t {input.reference_txt} -c 0.70 -o step6_classify
        """

rule make_otu:
    input: 
        assigned_taxonomy = "step6_classify/rep_set_tax_assignments.txt",
        otu = "step4_pick_otu/trimmed_joined_otus.txt"
    output:
        "step7_otu/otu_table.biom"
    shell:
        """
        make_otu_table.py -i {input.otu} -t {input.assigned_taxonomy} -o {output}
        """

rule convert_otu_table:
    input:
        "step7_otu/otu_table.biom"
    output:
        "step7_otu/otu_table.otu"
    shell:
        """
        biom convert -i {input} -o {output} --to-tsv
        """